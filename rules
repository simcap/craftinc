Hypothesis
1. Brain can only retain a few simple rules to apply when exercising.
2. Developers will push the same kind of the code that they see in the codebase. A team should show the exemples to a newcomer. Otherwise they cannot expect him to have high standard

Idea
Implement 3 rules that have multiple consequences & corrolaries

1. Short classes
+ Single responsiblity principle respected
+ Focused an readable unit test
- Smell TooManyClasses

2. Short method
+ One level of abstraction principle respected
+ Easier to fix a bug as dealing with only one level of abstraction

3. Best possible name
+ Readable code as we know the originral intent
+ help to solve the TooManyClasses issue

Other objective
+ Minimizes Javadoc (extract Method, name Class)
+ Get rid of dead document on code standard
(Language evolves, nobody will update the document accordingly)
(Newcomer has a bad image/feeling/start when realises that document
  on code standard is not respected. He will push the same crappy code.)
+ Living code should be the documentation.
(Newcomer should only look at the code to know what are the standard)

Code documentation implementation



